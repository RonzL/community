<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ronz.community.dao.MessageMapper">
    <sql id="selectFields">
        id, from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <sql id="insertFields">
        from_id, to_id, conversation_id, content, status, create_time
    </sql>

    <!--
        分页查询某个用户的所有会话列表（每个会话只查询出最新的一条消息）
    -->
    <select id="selectConversations" resultType="Message">
        /* 根据查询出的会话ID，查询出所有的会话信息 */
        select <include refid="selectFields"/>
        from message
        where id in
        (
            /* 首先查询出当前用户的所有的会话记录(最新的消息) ID */
            SELECT MAX(id)
            FROM message
            WHERE status !=2  /* 0-未读；1-已读；2-已删除 */
            AND from_id != 1    /* 1-系统消息 */
            AND (from_id = #{userId} or to_id = #{userId})
            GROUP BY conversation_id
        )
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

    <!--
        查询某个用户的所有会话个数
    -->
    <select id="selectConversationCount" resultType="int">
        select count(id)
        from message
        where id in
        (
             /* 首先查询出当前用户的所有的会话记录(最新的消息) ID */
            SELECT MAX(id)
            FROM message
            WHERE status !=2  /* 0-未读；1-已读；2-已删除 */
            AND from_id != 1    /* 1-系统消息 */
            AND (from_id = #{userId} or to_id = #{userId})
            GROUP BY conversation_id
        )
    </select>

    <!--
        查询某个用户的未读消息条数(某个会话的未读消息条数/所有未读消息条数)
    -->
    <select id="selectConversationUnreadLetterCount" resultType="int">
        select count(id)
        from message
        where status = 0  /* 0-未读消息 */
        and from_id != 1    /* 非系统消息 */
        and to_id = #{userId} /* 未读消息，用户一定是接收方 */
        <if test="conversationId != null">    /* 如果没有 conversation，说明查询的是所有未读的消息数量 */
            and conversation_id = #{conversationId}
        </if>
    </select>

    <!--
        分页查询某个会话下的消息
    -->
    <select id="selectConversationLetters" resultType="Message">
        select <include refid="selectFields"/>
        from message
        where conversation_id = #{conversationId}
        and status != 2
        order by create_time desc
        limit #{offset}, #{limit}
    </select>

    <!--
        查询某个会话下的消息数量
    -->
    <select id="selectConversationLettersCount" resultType="int">
        select count(id)
        from message
        where conversation_id = #{conversationId}
        and status != 2
    </select>

    <!--
        插入消息
    -->
    <insert id="insertLetter" keyProperty="id">
        insert into
        message(<include refid="insertFields"/>)
        values (#{fromId}, #{toId}, #{conversationId}, #{content}, #{status}, #{createTime})
    </insert>

    <!--
        更新信息状态
    -->
    <update id="updateStatus" parameterType="Integer">
        update message
        set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">    /* 生成 (131,101,255) 这种 */
            #{id}
        </foreach>
    </update>

</mapper>